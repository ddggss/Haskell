Basic knowledges
	• 编译运行Haskell代码的步骤
		a. 在终端输入. /Users/apple/.ghcup/env
		b. 再输入ghci 开启
		c. 如果要运行文件, 则输入 :l 文件名      ⚠️: 这里是字母l不是|
		d. 再调用文件内的函数即可
		
Types 
:type + expression： 显示表达式的类型
eg: :type not False    ---> not False : : Bool
	• Basic types 基本类型
		a. Bool      ---- logical values
		b. Char      ---- single characters
		c. String    ---- strings of characters
		d. Int         ---- fixed-precision integers
		e. Integer  ---- arbitrary-precision integers
		f. Float     ---- floating-point numbers
		⚠️Int类型是固定精度, 而Integer是任意精度
	• List types
	A list is sequence of values of the same type:
	eg: [False, True, False] : : [Bool] 
	      ['a','b','c','d'] : : [Char]
	因为list里面所有的元素都是一种类型，所以返回值只有一个(因为类型都一样！！)
	• Tuple types
	A tuple is a sequence of values of different types:
	eg: (False, True) : : (Bool, Bool)
	     （False, 'a', True) : : (Bool, Char, Bool)
	     （True, ['a','b']) : : (Bool, [Char]) 
	因为tuple里面的元素是不限类型的，所以返回值要求返回每一个元素的类型！！
	返回的类型括号：[]/()要根据表达式来判断
	eg: [(False,'0'), (True,'1')]  : : [(Bool, Char)]
	      ([False, True], ['0', '1']) : : ([Bool], [Char])
Functions
	Function is a mapping from values of one type to values of another type
	E.g. even : : Int -> Bool
	• Curried functions 柯里化函数
	它允许我们将一个多参数的函数分解为一系列只接受一个参数的函数。
	eg: add : : (Int, Int) -> Int
	      add (x, y) = x+y                   ----- 函数定义
	      add (3,5) = 8                        ----- 函数调用
	• Polymorphic functions 多态函数
	这种类型的function包含一个或多个类型的变量
	eg: length : : [a] -> Int 
	该function接收了一个叫a的list, 返回了一个Int, 因为这个a可以是各种类型的, 因此是polymoephic function
		a. Length : : [a] -> Int           ----- a一列表的接收数据，并返回list的长度
		eg: length [False, True]     ----- a = Bool
		      输出: 2
		      length [1,2,3,4]            ----- a = Int
		      输出: 4      
		b. fst : : (a, b) -> a                 ----- 接收一个包含两个类型的元组(可不同类型)，并返回第一个元素的值
		eg: fst ('a', False)
		      输出: 'a'
		c. head : : [a] -> a                  ----- 接收任何类型的列表(同类型)，并返回该类型的第一个元素
		eg: head [1,2,3]            
		      输出: 1
		      head ['a', 'b', 'c']
		      输出: 'a'
		d. take : : Int -> [a] -> [a]     ------ int是从a列表中提取元素的数量
		eg: take 3 [1,2,3,4,5]
		      输出: [1,2,3]
		      take 1 ['a', 'b', 'c']
		      输出: "a"
		e. zip : : [a] -> [b] -> [(a, b)]  ------ 接收两个列表的元素并将其合并成一个配对的列表
		eg: zip [1,2,3] [4,5,6]
		      输出: [(1,4), (2,5), (3,6)]
		      zip ['a', 'b', 'c'] [1,2,3]
		      输出: [('a', 1), ('b', 2), ('c', 3)]
		f. id : : a -> a                         ------ a接收任何形式的元素,并进行复制输出
		eg: id 'a'
		      输出: 'a'
		      id [1,2,3]
		      输出: [1,2,3]
	• Overloaded functions
	A polymorphic function is called overloaded if its type contains one or more class constraints.
	如果一个polymorphic function被称为overloaded, 那么这个function包含一个或多个类限制
	eg: (+) : : Num a => a --> a --> a
	这里的a是numeric type, 有一个class constraint, 所有该函数是overloaded
	
Type classes
	• Num    --  Numeric types
	eg: (+) : : Num a => a -> a -> a
	• Eq        --   Equality types
	eg: (=) : : Eq a => a -> a -> Bool
	• Ord      --  Ordered types
	eg: (<) : : Ord a => a -> a -> Bool
